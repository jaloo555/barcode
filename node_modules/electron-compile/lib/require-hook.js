'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = registerRequireExtension;

var _mimeTypes = require('@paulcbetts/mime-types');

var _mimeTypes2 = _interopRequireDefault(_mimeTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Initializes the node.js hook that allows us to intercept files loaded by 
 * node.js and rewrite them. This method along with {@link initializeProtocolHook} 
 * are the top-level methods that electron-compile actually uses to intercept 
 * code that Electron loads.
 *  
 * @param  {CompilerHost} compilerHost  The compiler host to use for compilation.
 */
function registerRequireExtension(compilerHost) {
  Object.keys(compilerHost.compilersByMimeType).forEach(mimeType => {
    let ext = _mimeTypes2.default.extension(mimeType);

    require.extensions[`.${ ext }`] = (module, filename) => {
      var _compilerHost$compile = compilerHost.compileSync(filename);

      let code = _compilerHost$compile.code;

      if (code === null) {
        console.error(`null code returned for "${ filename }".  Please raise an issue on 'electron-compile' with the contents of this file.`);
      }
      module._compile(code, filename);
    };
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXF1aXJlLWhvb2suanMiXSwibmFtZXMiOlsicmVnaXN0ZXJSZXF1aXJlRXh0ZW5zaW9uIiwiY29tcGlsZXJIb3N0IiwiT2JqZWN0Iiwia2V5cyIsImNvbXBpbGVyc0J5TWltZVR5cGUiLCJmb3JFYWNoIiwibWltZVR5cGUiLCJleHQiLCJleHRlbnNpb24iLCJyZXF1aXJlIiwiZXh0ZW5zaW9ucyIsIm1vZHVsZSIsImZpbGVuYW1lIiwiY29tcGlsZVN5bmMiLCJjb2RlIiwiY29uc29sZSIsImVycm9yIiwiX2NvbXBpbGUiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQVV3QkEsd0I7O0FBVnhCOzs7Ozs7QUFFQTs7Ozs7Ozs7QUFRZSxTQUFTQSx3QkFBVCxDQUFrQ0MsWUFBbEMsRUFBZ0Q7QUFDN0RDLFNBQU9DLElBQVAsQ0FBWUYsYUFBYUcsbUJBQXpCLEVBQThDQyxPQUE5QyxDQUF1REMsUUFBRCxJQUFjO0FBQ2xFLFFBQUlDLE1BQU0sb0JBQVVDLFNBQVYsQ0FBb0JGLFFBQXBCLENBQVY7O0FBRUFHLFlBQVFDLFVBQVIsQ0FBb0IsS0FBR0gsR0FBSSxHQUEzQixJQUFnQyxDQUFDSSxNQUFELEVBQVNDLFFBQVQsS0FBc0I7QUFBQSxrQ0FDdkNYLGFBQWFZLFdBQWIsQ0FBeUJELFFBQXpCLENBRHVDOztBQUFBLFVBQy9DRSxJQUQrQyx5QkFDL0NBLElBRCtDOztBQUVwRCxVQUFJQSxTQUFTLElBQWIsRUFBbUI7QUFDakJDLGdCQUFRQyxLQUFSLENBQWUsNEJBQTBCSixRQUFTLGtGQUFsRDtBQUNEO0FBQ0RELGFBQU9NLFFBQVAsQ0FBZ0JILElBQWhCLEVBQXNCRixRQUF0QjtBQUNELEtBTkQ7QUFPRCxHQVZEO0FBV0QiLCJmaWxlIjoicmVxdWlyZS1ob29rLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1pbWVUeXBlcyBmcm9tICdAcGF1bGNiZXR0cy9taW1lLXR5cGVzJztcclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplcyB0aGUgbm9kZS5qcyBob29rIHRoYXQgYWxsb3dzIHVzIHRvIGludGVyY2VwdCBmaWxlcyBsb2FkZWQgYnkgXHJcbiAqIG5vZGUuanMgYW5kIHJld3JpdGUgdGhlbS4gVGhpcyBtZXRob2QgYWxvbmcgd2l0aCB7QGxpbmsgaW5pdGlhbGl6ZVByb3RvY29sSG9va30gXHJcbiAqIGFyZSB0aGUgdG9wLWxldmVsIG1ldGhvZHMgdGhhdCBlbGVjdHJvbi1jb21waWxlIGFjdHVhbGx5IHVzZXMgdG8gaW50ZXJjZXB0IFxyXG4gKiBjb2RlIHRoYXQgRWxlY3Ryb24gbG9hZHMuXHJcbiAqICBcclxuICogQHBhcmFtICB7Q29tcGlsZXJIb3N0fSBjb21waWxlckhvc3QgIFRoZSBjb21waWxlciBob3N0IHRvIHVzZSBmb3IgY29tcGlsYXRpb24uXHJcbiAqLyBcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVnaXN0ZXJSZXF1aXJlRXh0ZW5zaW9uKGNvbXBpbGVySG9zdCkge1xyXG4gIE9iamVjdC5rZXlzKGNvbXBpbGVySG9zdC5jb21waWxlcnNCeU1pbWVUeXBlKS5mb3JFYWNoKChtaW1lVHlwZSkgPT4ge1xyXG4gICAgbGV0IGV4dCA9IG1pbWVUeXBlcy5leHRlbnNpb24obWltZVR5cGUpO1xyXG4gICAgXHJcbiAgICByZXF1aXJlLmV4dGVuc2lvbnNbYC4ke2V4dH1gXSA9IChtb2R1bGUsIGZpbGVuYW1lKSA9PiB7XHJcbiAgICAgIGxldCB7Y29kZX0gPSBjb21waWxlckhvc3QuY29tcGlsZVN5bmMoZmlsZW5hbWUpO1xyXG4gICAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYG51bGwgY29kZSByZXR1cm5lZCBmb3IgXCIke2ZpbGVuYW1lfVwiLiAgUGxlYXNlIHJhaXNlIGFuIGlzc3VlIG9uICdlbGVjdHJvbi1jb21waWxlJyB3aXRoIHRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUuYCk7XHJcbiAgICAgIH1cclxuICAgICAgbW9kdWxlLl9jb21waWxlKGNvZGUsIGZpbGVuYW1lKTtcclxuICAgIH07XHJcbiAgfSk7XHJcbn1cclxuIl19