'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initializeRendererProcess = initializeRendererProcess;

var _compilerHost = require('./compiler-host');

var _compilerHost2 = _interopRequireDefault(_compilerHost);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// NB: These are duped in protocol-hook so we can save startup time, make
// sure to run both!
const magicGlobalForRootCacheDir = '__electron_compile_root_cache_dir';
const magicGlobalForAppRootDir = '__electron_compile_app_root_dir';

const d = require('debug-electron')('electron-compile:initialize-renderer');

let rendererInitialized = false;

/**
 * Called by our rigged script file at the top of every HTML file to set up
 * the same compilers as the browser process that created us
 *
 * @private
 */
function initializeRendererProcess(readOnlyMode) {
  if (rendererInitialized) return;

  let rootCacheDir = require('electron').remote.getGlobal(magicGlobalForRootCacheDir);
  let appRoot = require('electron').remote.getGlobal(magicGlobalForAppRootDir);
  let compilerHost = null;

  // NB: This has to be synchronous because we need to block HTML parsing
  // until we're set up
  if (readOnlyMode) {
    d(`Setting up electron-compile in precompiled mode with cache dir: ${ rootCacheDir }`);
    compilerHost = _compilerHost2.default.createReadonlyFromConfigurationSync(rootCacheDir, appRoot);
  } else {
    d(`Setting up electron-compile in development mode with cache dir: ${ rootCacheDir }`);

    var _require = require('./config-parser');

    const createCompilers = _require.createCompilers;

    const compilersByMimeType = createCompilers();

    compilerHost = _compilerHost2.default.createFromConfigurationSync(rootCacheDir, appRoot, compilersByMimeType);
  }

  require('./x-require');
  require('./require-hook').default(compilerHost);
  rendererInitialized = true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbml0aWFsaXplLXJlbmRlcmVyLmpzIl0sIm5hbWVzIjpbImluaXRpYWxpemVSZW5kZXJlclByb2Nlc3MiLCJtYWdpY0dsb2JhbEZvclJvb3RDYWNoZURpciIsIm1hZ2ljR2xvYmFsRm9yQXBwUm9vdERpciIsImQiLCJyZXF1aXJlIiwicmVuZGVyZXJJbml0aWFsaXplZCIsInJlYWRPbmx5TW9kZSIsInJvb3RDYWNoZURpciIsInJlbW90ZSIsImdldEdsb2JhbCIsImFwcFJvb3QiLCJjb21waWxlckhvc3QiLCJjcmVhdGVSZWFkb25seUZyb21Db25maWd1cmF0aW9uU3luYyIsImNyZWF0ZUNvbXBpbGVycyIsImNvbXBpbGVyc0J5TWltZVR5cGUiLCJjcmVhdGVGcm9tQ29uZmlndXJhdGlvblN5bmMiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiOzs7OztRQWlCZ0JBLHlCLEdBQUFBLHlCOztBQWpCaEI7Ozs7OztBQUVBO0FBQ0E7QUFDQSxNQUFNQyw2QkFBNkIsbUNBQW5DO0FBQ0EsTUFBTUMsMkJBQTJCLGlDQUFqQzs7QUFFQSxNQUFNQyxJQUFJQyxRQUFRLGdCQUFSLEVBQTBCLHNDQUExQixDQUFWOztBQUVBLElBQUlDLHNCQUFzQixLQUExQjs7QUFFQTs7Ozs7O0FBTU8sU0FBU0wseUJBQVQsQ0FBbUNNLFlBQW5DLEVBQWlEO0FBQ3RELE1BQUlELG1CQUFKLEVBQXlCOztBQUV6QixNQUFJRSxlQUFlSCxRQUFRLFVBQVIsRUFBb0JJLE1BQXBCLENBQTJCQyxTQUEzQixDQUFxQ1IsMEJBQXJDLENBQW5CO0FBQ0EsTUFBSVMsVUFBVU4sUUFBUSxVQUFSLEVBQW9CSSxNQUFwQixDQUEyQkMsU0FBM0IsQ0FBcUNQLHdCQUFyQyxDQUFkO0FBQ0EsTUFBSVMsZUFBZSxJQUFuQjs7QUFFQTtBQUNBO0FBQ0EsTUFBSUwsWUFBSixFQUFrQjtBQUNoQkgsTUFBRyxvRUFBa0VJLFlBQWEsR0FBbEY7QUFDQUksbUJBQWUsdUJBQWFDLG1DQUFiLENBQWlETCxZQUFqRCxFQUErREcsT0FBL0QsQ0FBZjtBQUNELEdBSEQsTUFHTztBQUNMUCxNQUFHLG9FQUFrRUksWUFBYSxHQUFsRjs7QUFESyxtQkFFdUJILFFBQVEsaUJBQVIsQ0FGdkI7O0FBQUEsVUFFR1MsZUFGSCxZQUVHQSxlQUZIOztBQUdMLFVBQU1DLHNCQUFzQkQsaUJBQTVCOztBQUVBRixtQkFBZSx1QkFBYUksMkJBQWIsQ0FBeUNSLFlBQXpDLEVBQXVERyxPQUF2RCxFQUFnRUksbUJBQWhFLENBQWY7QUFDRDs7QUFFRFYsVUFBUSxhQUFSO0FBQ0FBLFVBQVEsZ0JBQVIsRUFBMEJZLE9BQTFCLENBQWtDTCxZQUFsQztBQUNBTix3QkFBc0IsSUFBdEI7QUFDRCIsImZpbGUiOiJpbml0aWFsaXplLXJlbmRlcmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbXBpbGVySG9zdCBmcm9tICcuL2NvbXBpbGVyLWhvc3QnO1xyXG5cclxuLy8gTkI6IFRoZXNlIGFyZSBkdXBlZCBpbiBwcm90b2NvbC1ob29rIHNvIHdlIGNhbiBzYXZlIHN0YXJ0dXAgdGltZSwgbWFrZVxyXG4vLyBzdXJlIHRvIHJ1biBib3RoIVxyXG5jb25zdCBtYWdpY0dsb2JhbEZvclJvb3RDYWNoZURpciA9ICdfX2VsZWN0cm9uX2NvbXBpbGVfcm9vdF9jYWNoZV9kaXInO1xyXG5jb25zdCBtYWdpY0dsb2JhbEZvckFwcFJvb3REaXIgPSAnX19lbGVjdHJvbl9jb21waWxlX2FwcF9yb290X2Rpcic7XHJcblxyXG5jb25zdCBkID0gcmVxdWlyZSgnZGVidWctZWxlY3Ryb24nKSgnZWxlY3Ryb24tY29tcGlsZTppbml0aWFsaXplLXJlbmRlcmVyJyk7XHJcblxyXG5sZXQgcmVuZGVyZXJJbml0aWFsaXplZCA9IGZhbHNlO1xyXG5cclxuLyoqXHJcbiAqIENhbGxlZCBieSBvdXIgcmlnZ2VkIHNjcmlwdCBmaWxlIGF0IHRoZSB0b3Agb2YgZXZlcnkgSFRNTCBmaWxlIHRvIHNldCB1cFxyXG4gKiB0aGUgc2FtZSBjb21waWxlcnMgYXMgdGhlIGJyb3dzZXIgcHJvY2VzcyB0aGF0IGNyZWF0ZWQgdXNcclxuICpcclxuICogQHByaXZhdGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplUmVuZGVyZXJQcm9jZXNzKHJlYWRPbmx5TW9kZSkge1xyXG4gIGlmIChyZW5kZXJlckluaXRpYWxpemVkKSByZXR1cm47XHJcblxyXG4gIGxldCByb290Q2FjaGVEaXIgPSByZXF1aXJlKCdlbGVjdHJvbicpLnJlbW90ZS5nZXRHbG9iYWwobWFnaWNHbG9iYWxGb3JSb290Q2FjaGVEaXIpO1xyXG4gIGxldCBhcHBSb290ID0gcmVxdWlyZSgnZWxlY3Ryb24nKS5yZW1vdGUuZ2V0R2xvYmFsKG1hZ2ljR2xvYmFsRm9yQXBwUm9vdERpcik7XHJcbiAgbGV0IGNvbXBpbGVySG9zdCA9IG51bGw7XHJcblxyXG4gIC8vIE5COiBUaGlzIGhhcyB0byBiZSBzeW5jaHJvbm91cyBiZWNhdXNlIHdlIG5lZWQgdG8gYmxvY2sgSFRNTCBwYXJzaW5nXHJcbiAgLy8gdW50aWwgd2UncmUgc2V0IHVwXHJcbiAgaWYgKHJlYWRPbmx5TW9kZSkge1xyXG4gICAgZChgU2V0dGluZyB1cCBlbGVjdHJvbi1jb21waWxlIGluIHByZWNvbXBpbGVkIG1vZGUgd2l0aCBjYWNoZSBkaXI6ICR7cm9vdENhY2hlRGlyfWApO1xyXG4gICAgY29tcGlsZXJIb3N0ID0gQ29tcGlsZXJIb3N0LmNyZWF0ZVJlYWRvbmx5RnJvbUNvbmZpZ3VyYXRpb25TeW5jKHJvb3RDYWNoZURpciwgYXBwUm9vdCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGQoYFNldHRpbmcgdXAgZWxlY3Ryb24tY29tcGlsZSBpbiBkZXZlbG9wbWVudCBtb2RlIHdpdGggY2FjaGUgZGlyOiAke3Jvb3RDYWNoZURpcn1gKTtcclxuICAgIGNvbnN0IHsgY3JlYXRlQ29tcGlsZXJzIH0gPSByZXF1aXJlKCcuL2NvbmZpZy1wYXJzZXInKTtcclxuICAgIGNvbnN0IGNvbXBpbGVyc0J5TWltZVR5cGUgPSBjcmVhdGVDb21waWxlcnMoKTtcclxuXHJcbiAgICBjb21waWxlckhvc3QgPSBDb21waWxlckhvc3QuY3JlYXRlRnJvbUNvbmZpZ3VyYXRpb25TeW5jKHJvb3RDYWNoZURpciwgYXBwUm9vdCwgY29tcGlsZXJzQnlNaW1lVHlwZSk7XHJcbiAgfVxyXG5cclxuICByZXF1aXJlKCcuL3gtcmVxdWlyZScpO1xyXG4gIHJlcXVpcmUoJy4vcmVxdWlyZS1ob29rJykuZGVmYXVsdChjb21waWxlckhvc3QpO1xyXG4gIHJlbmRlcmVySW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG59XHJcbiJdfQ==