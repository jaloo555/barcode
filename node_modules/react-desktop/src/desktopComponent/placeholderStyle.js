'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _radium = require('radium');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var PlaceholderStyleComponent = function () {
  function PlaceholderStyleComponent(root) {
    _classCallCheck(this, PlaceholderStyleComponent);

    this.root = root;
  }

  _createClass(PlaceholderStyleComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.root.getPlaceholderStyle) {
        this.applyPlaceholderStyle();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.root.getPlaceholderStyle) {
        if (JSON.stringify(this._currentPlaceholderStyle) != JSON.stringify(this.root.getPlaceholderStyle())) {
          this.applyPlaceholderStyle();
        }
      }
    }
  }, {
    key: 'applyPlaceholderStyle',
    value: function applyPlaceholderStyle() {
      if (this._currentPlaceholderStyleElement) {
        this._currentPlaceholderStyleElement.parentNode.removeChild(this._currentPlaceholderStyleElement);
      }

      var container = _reactDom2.default.findDOMNode(this.root.refs.container);
      var id = PlaceholderStyleComponent.generateUniqueId();
      container.setAttribute('data-reactdesktopid', id);

      var selector = '[data-reactdesktopid="' + id + '"]';

      this._currentPlaceholderStyle = _extends({}, this.root.getPlaceholderStyle());
      var style = _extends({}, this.root.getPlaceholderStyle());

      var styles = { 0: style };
      if (style[':hover']) {
        styles = _extends({}, styles, { ':hover': style[':hover'] });
        delete styles[0][':hover'];
      }

      if (style[':active']) {
        styles = _extends({}, styles, { ':active': style[':active'] });
        delete styles[0][':active'];
      }

      if (style[':focus']) {
        styles = _extends({}, styles, { ':focus': style[':focus'] });
        delete styles[0][':focus'];
      }

      var rules = {};

      for (var prop in styles) {
        if (styles.hasOwnProperty(prop)) {
          rules[selector + ' input' + (prop !== '0' ? prop : '') + '::-webkit-input-placeholder'] = styles[prop];
          rules[selector + ' input' + (prop !== '0' ? prop : '') + '::-moz-placeholder'] = styles[prop];
          rules[selector + ' input' + (prop !== '0' ? prop : '') + ':-ms-input-placeholder'] = styles[prop];
          rules[selector + ' input' + (prop !== '0' ? prop : '') + ':placeholder'] = styles[prop];
        }
      }

      var tmpContainer = document.createElement('div');
      _reactDom2.default.render(_react2.default.createElement(_radium.Style, { rules: rules }), tmpContainer);
      container.appendChild(this._currentPlaceholderStyleElement = tmpContainer.firstChild);
    }
  }], [{
    key: 'generateUniqueId',
    value: function generateUniqueId() {
      return Math.floor(Math.random() * 10000 + 1) + '-' + +Math.floor(Math.random() * 10000 + 1) + '-' + +Math.floor(Math.random() * 10000 + 1) + '-' + +Math.floor(Math.random() * 10000 + 1) + '-' + +Math.floor(Math.random() * 10000 + 1) + '-' + +Math.floor(Math.random() * 10000 + 1) + '-' + +Math.floor(Math.random() * 10000 + 1) + '-' + Math.floor(Math.random() * 100000000000000);
    }
  }]);

  return PlaceholderStyleComponent;
}();

exports.default = PlaceholderStyleComponent;