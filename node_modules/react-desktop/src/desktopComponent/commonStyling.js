'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _react = require('react');

var _color = require('../color');

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var CommonStylingComponent = function () {
  _createClass(CommonStylingComponent, null, [{
    key: 'propTypes',
    value: function propTypes(options) {
      var propTypes = {};

      if (options.dimension) {
        propTypes.width = _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]);
        propTypes.height = _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]);
      }

      if (options.margin) {
        propTypes.margin = _react.PropTypes.string;
      }

      if (options.padding) {
        propTypes.padding = _react.PropTypes.string;
      }

      if (options.horizontalAlignment || options.alignment) {
        propTypes.horizontalAlignment = _react.PropTypes.string;
      }

      if (options.verticalAlignment || options.alignment) {
        propTypes.verticalAlignment = _react.PropTypes.string;
      }

      if (options.hidden) {
        propTypes.hidden = _react.PropTypes.bool;
      }

      if (options.background) {
        propTypes.background = _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.string]);
      }

      return propTypes;
    }
  }]);

  function CommonStylingComponent(root, options, params, refs) {
    _classCallCheck(this, CommonStylingComponent);

    this.root = root;
    this.options = options;
    this.params = params;
    this.refs = refs;
  }

  _createClass(CommonStylingComponent, [{
    key: 'findRef',
    value: function findRef(ref, component) {
      if (!component) return null;else if (component.ref === ref) {
        return component;
      }
      if (component.props.children) {
        if (Object.prototype.toString.call(component.props.children) === '[object Array]') {
          for (var i = 0, len = component.props.children.length; i < len; ++i) {
            var result = this.findRef(ref, component.props.children[i]);
            if (result) {
              return result;
            }
          }
        } else {
          if (component.props.children.ref === ref) {
            return component.props.children;
          } else if (component.props.children.props && component.props.children.props.children) {
            return this.findRef(ref, component.props.children);
          }
        }
      }
      return null;
    }
  }, {
    key: 'replaceRef',
    value: function replaceRef(ref, component, replacement) {
      if (component.props.children) {
        if (Object.prototype.toString.call(component.props.children) === '[object Array]') {
          for (var i = 0, len = component.props.children.length; i < len; ++i) {
            if (component.props.children[i].ref === ref) {
              return component.props.children[i] = replacement;
            } else if (component.props.children[i].props && component.props.children[i].props.children) {
              var result = this.replaceRef(ref, component.props.children[i], replacement);
              if (result) return result;
            }
          }
        } else {
          if (component.props.children.ref === ref) {
            return component.props.children = replacement;
          } else if (component.props.children.props && component.props.children.props.children) {
            return this.replaceRef(ref, component.props.children, replacement);
          }
        }
      }
      return null;
    }
  }, {
    key: 'render',
    value: function render(component) {
      var props = _extends({}, component.props);
      var style = void 0;

      var styling = ['background', 'hidden', 'verticalAlignment', 'horizontalAlignment', 'padding', 'margin', 'dimension'];
      var components = {};
      for (var prop in this.refs) {
        if (this.refs.hasOwnProperty(prop)) {
          var _components$refs$prop;

          if (components[this.refs[prop]] === undefined) components[this.refs[prop]] = [];
          (_components$refs$prop = components[this.refs[prop]]).push.apply(_components$refs$prop, _toConsumableArray(styling.splice(styling.indexOf(prop), 1)));
        }
      }

      for (var ref in components) {
        if (components.hasOwnProperty(ref)) {
          var el = this.findRef(ref, component);
          if (el) {
            style = el.props.style || {};
            for (var i = 0, len = components[ref].length; i < len; ++i) {
              var _components$ref$i = this[components[ref][i]](props, style);

              props = _components$ref$i.props;
              style = _components$ref$i.style;
            }
            this.replaceRef(ref, component, (0, _react.cloneElement)(el, { style: style }));
          }
        }
      }

      style = component.props.style || {};
      for (var _i = 0, _len = styling.length; _i < _len; ++_i) {
        var _styling$_i = this[styling[_i]](props, style);

        props = _styling$_i.props;
        style = _styling$_i.style;
      }

      return (0, _react.cloneElement)(component, _extends({}, props, {
        style: _extends({
          userSelect: 'none',
          cursor: 'default',
          boxSizing: 'border-box'
        }, style, style.display === 'none' ? { display: 'none' } : null)
      }));
    }
  }, {
    key: 'dimension',
    value: function dimension(props, style) {
      props = _extends({}, props);
      var newStyles = {};
      var overrideStyles = {};

      if (props.width && this.options.dimension) {
        if (props.width.match(/^[0-9]+$/)) {
          newStyles.width = props.width + 'px';
        } else {
          newStyles.width = props.width;
        }
        props.width = null;
      } else if (this.options.dimension && this.params['Dimension'] && this.params['Dimension']['defaultWidth']) {
        newStyles.width = this.params['Dimension']['defaultWidth'];
      }

      if (props.height && this.options.dimension) {
        if (props.height.match(/^[0-9]+$/)) {
          newStyles.height = props.height + 'px';
        } else {
          newStyles.height = props.height;
        }
        props.height = null;
      } else if (this.options.dimension && this.params['Dimension'] && this.params['Dimension']['defaultHeight']) {
        newStyles.height = this.params['Dimension']['defaultHeight'];
      }

      return {
        props: props,
        style: _extends({}, newStyles, style, overrideStyles)
      };
    }
  }, {
    key: 'margin',
    value: function margin(props, style) {
      if (props.margin && this.options.margin) {
        style.margin = props.margin;
        props.margin = null;
      }

      return { props: props, style: style };
    }
  }, {
    key: 'padding',
    value: function padding(props, style) {
      if (props.padding && this.options.padding) {
        style.padding = props.padding;
        props.padding = null;
      }

      return { props: props, style: style };
    }
  }, {
    key: 'background',
    value: function background(props, style) {
      if (props.background && this.options.background) {
        if (typeof props.background === 'boolean') {
          style.backgroundColor = (0, _color.convertColor)(props.color);
        } else {
          style.backgroundColor = (0, _color.convertColor)(props.background);
        }
        props.background = null;
      }

      return { props: props, style: style };
    }
  }, {
    key: 'horizontalAlignment',
    value: function horizontalAlignment(props, style) {
      if (props.horizontalAlignment && this.options.horizontalAlignment || this.options.alignment) {
        switch (props.horizontalAlignment) {
          case 'center':
            style.justifyContent = 'center';
            break;
          case 'left':
            style.justifyContent = 'flex-start';
            break;
          case 'right':
            style.justifyContent = 'flex-end';
            break;
        }
        props.horizontalAlignment = null;
      }

      return { props: props, style: style };
    }
  }, {
    key: 'verticalAlignment',
    value: function verticalAlignment(props, style) {
      if (props.verticalAlignment && this.options.verticalAlignment || this.options.alignment) {
        switch (props.verticalAlignment) {
          case 'center':
            style.alignItems = 'center';
            break;
          case 'top':
            style.alignItems = 'flex-start';
            break;
          case 'bottom':
            style.alignItems = 'flex-end';
            break;
        }
        props.verticalAlignment = null;
      }

      return { props: props, style: style };
    }
  }, {
    key: 'hidden',
    value: function hidden(props, style) {
      if (props.hidden !== null && this.options.hidden) {
        if (!this._originalDisplay && style.display) this._originalDisplay = style.display;

        style.display = props.hidden === true ? 'none' : this._originalDisplay;
        props.hidden = null;
      }

      return { props: props, style: style };
    }
  }]);

  return CommonStylingComponent;
}();

exports.default = CommonStylingComponent;